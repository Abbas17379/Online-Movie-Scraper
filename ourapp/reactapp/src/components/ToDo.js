// Generated by AI

import { useState } from "react";
import "./ToDo.css";
// Make sure that the name of your file is the same as the name of your function!
function TodoList() {
  const [todos, setTodos] = useState([]);
  const [input, setInput] = useState("");

  // Function to handle adding a new todo
  const handleAddTodo = () => {
    if (input !== "") {
      // Create a new todo object with the input text and isCompleted set to false
      const newTodo = { text: input, isCompleted: false };

      // Add the new todo to the existing todos array using the spread operator
      const newTodos = [...todos, newTodo];

      // Update the todos state with the new array of todos
      // Instead of something like Ruby, where we can say first_name = Alex, we can't do that in React! Instead, we use useStates.
      setTodos(newTodos);

      // Clear the input field by setting it to an empty string
      // Instead of something like Ruby, where we can say first_name = Alex, we can't do that in React! Instead, we use useStates.
      setInput("");
    }
  };

  const handleComplete = (index) => {
    // Create a copy of the todos array using the spread operator
    const newTodos = [...todos];

    // Toggle the isCompleted property of the todo at the specified index
    newTodos[index].isCompleted = !newTodos[index].isCompleted;

    // Update the todos state with the modified array
    // Instead of something like Ruby, where we can say first_name = Alex, we can't do that in React! Instead, we use useStates.
    setTodos(newTodos);
  };

  const handleDelete = (index) => {
    // Create a new array by filtering out the todo at the specified index
    const newTodos = todos.filter((_, i) => i !== index);

    // Update the todos state with the new array
    // Instead of something like Ruby, where we can say first_name = Alex, we can't do that in React! Instead, we use useStates.
    setTodos(newTodos);
  };

  return (
    <div className="todo-container">
      {/* Input field for adding a new todo */}
      <input
        className="todo-input"
        value={input}
        onChange={(e) => setInput(e.target.value)}
        type="text"
        placeholder="Add a todo..."
      />
      {/* Button to add a new todo */}
      <button className="todo-button" onClick={handleAddTodo}>
        Add Todo
      </button>
      <ul className="todo-list">
        {/* Render each todo item */}
        {todos.map((todo, index) => (
          <li
            key={index}
            className="todo-item"
            style={{
              textDecoration: todo.isCompleted ? "line-through" : "none",
            }}
          >
            {/* Display the todo text */}
            <span className="todo-item-text">{todo.text}</span>
            {/* Button to mark a todo as complete */}
            <button
              className="todo-button"
              onClick={() => handleComplete(index)}
            >
              Complete
            </button>
            {/* Button to delete a todo */}
            <button className="todo-button" onClick={() => handleDelete(index)}>
              Delete
            </button>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default TodoList;
